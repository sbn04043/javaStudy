syntax -> 숫자 베이스, 오류 허용 X, 일치해야 작동
context 오류 -> exception 오류
1. 변수/타입 -> 속성
2. 연산자(산술, 알고리즘) -> 기능
3. 조건/반복문(statement)


패턴:
아토믹(원자) 패턴: 계속 쪼개서 더 이상 쪼갤 수 없을 때 다시 합쳐서 재활용성을 높임
    변수/타입 + 연산자

1. 변수, 타입 ex) Member(타입, 성) n(변수, 이름) = new Member();
    상속 구조(Alias, as)

기계어 고급언어 저급언어
기계어와 자연어를 연결(교집합): language

고급언어: 쉽게 이해할 수 있는 언어
저급언어: 기계어에 가까워 쉽게 이해할 수 없는 언어

변수 타입 + 연산자 ->메소드
메소드 + 필드 변수 -> 클래스
클래스 + 인터페이스 ->

함수형 프로그래밍 -> 인터페이스로 코딩

branch -> if / switch -> switch가 더 빠름(최대한 스위치 사용)
loop -> for / while