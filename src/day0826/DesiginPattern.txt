디자인 패턴
    0) 프로토 타입
    1) 싱글톤
    2) 반복자(iterator)
    3) 상태
    4) 퍼사드(메서드)
    5) 옵저버
    6) 커맨드
    7) 전략
    8) 브리지
    9) 구성(composition)
    10) 템플릿 메서드
    11) 빌더
    12) 데코레이터(장식 패턴)
    13) 추상 팩토리
    14) 인터프리터
    15) 방문자(visitor)
    16) 프록시
    17) 중재자
    18) 플라이 웨이트(권투에서 체급 48-)
    19) 책임 연쇄
    20) 메멘토
    21) 팩토리 메서드(패키지)

1. 생성 패턴:
 0) 프로토 타입
 1) 싱글톤: 빈(bean 객체)
    @Service @Repository(인터페이스만 있어도 자동 생성) @Controller new 키워드랑 동일
 11) 빌더
 13) 추상 팩토리
 21) 팩토리 메서드(팩토리끼리 묶을 수 있음)

    1) Member m = new Member();     -> 패턴 X
    2) public Member = create() { return new Member(); }  -> 패턴 O(팩토리 메소드)
        Member m = create(); -> 팩토리 패턴, 있던 객체를 다시 사용함.
    작동(객체 생성)은 똑같지만 1)은 직접, 2)은 제어의 역전

    static vs dynamic
     하나       여러개
     스크린      영상
     main

2. 구조 패턴: 자료 구조 생성 때 사용

3. 행동 패턴: 함수형으로 전환 할 때 사용
 10) 템플릿 메서드

Spring과 JPA는 독립적(Repository는 JPA 것인데 스프링이 사용하는 것)
SOAP vs RESULT
    1) SOAP: XML 방식으로 데이터 교환(구조화): @Controller(디폴트)


    2) REST: 다양한 형식으로 데이터 교환: @RestController(따로 설정을 해줘야 함)

    동기: 전화 -> 다른 행동을 못 하지만 바로 해야될 때 사용(거래(Transaction)) default
    비동기: 메신저 -> 다른 행동 같이 할 수 있음(동기 제외에서 모두 사용)
